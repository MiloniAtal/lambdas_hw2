AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Python file including external library changed again
Resources:
  AccessPolicy2:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: LambdaAccess2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:*'
              - 's3-object-lambda:*'
              - 'rekognition:*'
              - 'es:*'
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'cloudwatch:GetMetricStatistics'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:DescribeAlarmsForMetric'
              - 'kms:DescribeKey'
              - 'kms:ListAliases'
              - 'lambda:GetPolicy'
              - 'lambda:ListFunctions'
              - 'lex:*'
              - 'polly:DescribeVoices'
              - 'polly:SynthesizeSpeech'
              - 'kendra:ListIndices'
              - 'iam:ListRoles'
              - 's3:ListAllMyBuckets'
              - 'logs:DescribeLogGroups'
              - 's3:GetBucketLocation'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'lambda:AddPermission'
              - 'lambda:RemovePermission'
            Resource: 'arn:aws:lambda:*:*:function:AmazonLex*'
            Condition:
              StringEquals:
                'lambda:Principal': lex.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:GetRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
              - >-
                arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
          - Effect: Allow
            Action:
              - 'iam:CreateServiceLinkedRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
            Condition:
              StringEquals:
                'iam:AWSServiceName': lex.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:CreateServiceLinkedRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
            Condition:
              StringEquals:
                'iam:AWSServiceName': channels.lex.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:CreateServiceLinkedRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
            Condition:
              StringEquals:
                'iam:AWSServiceName': lexv2.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:CreateServiceLinkedRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
            Condition:
              StringEquals:
                'iam:AWSServiceName': channels.lexv2.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:DeleteServiceLinkedRole'
              - 'iam:GetServiceLinkedRoleDeletionStatus'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lex.amazonaws.com/AWSServiceRoleForLexChannels
              - >-
                arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/lex.amazonaws.com/AWSServiceRoleForLexBots
            Condition:
              StringEquals:
                'iam:PassedToService':
                  - lex.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots*
            Condition:
              StringEquals:
                'iam:PassedToService':
                  - lexv2.amazonaws.com
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource:
              - >-
                arn:aws:iam::*:role/aws-service-role/channels.lexv2.amazonaws.com/AWSServiceRoleForLexV2Channels*
            Condition:
              StringEquals:
                'iam:PassedToService':
                  - channels.lexv2.amazonaws.com
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 54f79d1e-386a-4532-8de9-2cc99504abb7
  LambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      Description: Role for the two Lambda Functions
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "opensearch.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - !Ref AccessPolicy2
      RoleName: LambdaMainRole

  LambdaFunctionTwo:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdaTwo.lambda_handler
      Runtime: python3.8
      FunctionName: HW2-LF2-Cloud
      CodeUri: ./src #Directory the source file is
      Role: !ImportValue RoleArn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: https://iav31pdv15.execute-api.us-east-1.amazonaws.com/beta/search
            Method: get
  LambdaFunctionOne:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambdaOne.lambda_handler
      Runtime: python3.8
      FunctionName: HW2-LF1-Cloud
      CodeUri: ./src #Directory the source file is
      Role: arn:aws:iam::788578785318:role/service-role/HW2-LF2-role-8vyfqqu1
      # Events:
      #   S3Event:
      #     Type: S3
      #     Properties:
      #       Bucket: b2-hw2-my2727-ma4338    # This must be the name of an S3 bucket declared in the same template file
      #       Events: s3:ObjectCreated:Put
          